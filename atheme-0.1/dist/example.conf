/*
 * This is the default configuration file for Atheme.
 *
 * All statements end in semi-colons (';').
 * Shell style, C style, and C++ style comments may be used.
 *
 * Items marked with "(*)" are reconfigurable at runtime via REHASH.
 *
 * $Id: example.conf 355 2002-03-13 17:27:24Z nenolod $
 */
 
/* The serverinfo{} block defines how we
 * appear on the IRC network.
 */
serverinfo {
	/* name
	 * The server name that this program uses on the IRC network.
	 * This is the name you'll have to use in C:/N:Lines.
	 */
	name = "services.oscnet.org";

	/* desc
	 * The ``server comment'' we send to the IRC network.
	 * If you want server hiding, prefix your desc with "(H)"
	 */
	desc = "Atheme IRC Services";

	/* uplink
	 * The server that services connects to.
	 */
	uplink = "irc.example.net";

	/* port
	 * The port that services connects to.
	 */
	port = 6667;

	/* (*)pass
	 * The password in the N:Line used for linking.
	 */
	pass = "linkage";

	/* vhost
	 * If you wish to bind to a source IP, set this.
	 */
	#vhost = "192.168.1.10";

	/* (*)recontime
	 * The number of seconds before we reconnect to the uplink.
	 */
	recontime = 10;

	/* (*)restarttime
	 * The number of seconds before we restart.
	 */
	restarttime = 10;

	/* (*)expire
	 * The number of days before inactive registrations are expired.
	 */
	expire = 30;

	/* (*)netname
	 * The name of your network.
	 */
	netname = "misconfigured network";

	/* (*)adminname
	 * The name of the person running this service.
	 */
	adminname = "misconfigured admin";

	/* (*)adminemail
	 * The email address of the person running this service.
	 */
	adminemail = "misconfigured@admin.tld";

	/* (*)mta
	 * The full path to your mail transfer agent.
	 * This is used for email authorization and password retrieval.
	 */
	mta = "/usr/sbin/sendmail";

	/* (*)loglevel
	 * Specify the minimum level of logging information to record
	 * in the main Atheme logfile.  Valid values (from highest to 
	 * lowest) are:
	 * debug, error, info, and none.
	 */
	loglevel = error;

	/* (*)maxusers
	 * What are the maximum usernames that one email address can register?
	 */
	maxusers = 5;

	/* (*)maxchans
	 * What are the maximum channels that one username can register?
	 */
	maxchans = 5;

	/* (*)auth
	 * What type of username registration authorization do you want?
	 * If "email," Atheme will send a confirmation email to the address to
	 * ensure it's valid. If "none," no message will be sent and the username
	 * will be fully registered.
	 * Valid values are: email, none.
	 */
	auth = none;

	/* casemapping
	 * Specify the casemapping to use. Almost all TSora (and any that follow
	 * the RFC correctly) ircds will use rfc1459 casemapping. Bahamut, Unreal,
	 * and other ``Dalnet'' ircds will use ascii casemapping.
	 * Valid values are: rfc1459, ascii.
	 */
	casemapping = rfc1459;
};

/* The cservice {} block defines settings specific to the channel
 * services client on the IRC network.
 */
cservice {
	/* (*)nick
	 * The nickname we want the client to have.
	 */
	nick = "X";

	/* user
	 * The username we want the client to have.
	 */
	user = "cservice";

	/* host
	 * The hostname we want the client to have.
	 */
	host = "channels.oscnet.org";

	/* real
	 * The GECOS of the client.
	 */
	real = "Channel Services";
};

/* The global {} block defines settings concerning the global noticer. */
gservice {
	/* nick
	 * Sets the nick used for sending out a global notice.
	 */
	nick = "OSCNet";

	/* user
	 * Sets the username used for this client.
	 */
	user = "announce";

	/* host
	 * The hostname used for this client.
	 */
	host = "network-announcements.oscnet.org";

	/* real
	 * The GECOS (real name) of the client.
	 */
	real = "Network Announcements";
};

oservice {
	/* nick
	 * The nickname we want the Operator Service to have.
	 */
	nick = "O";

	/* user
	 * Sets the username used for this client.
	 */
	user = "oservice";

	/* host
	 * The hostname used for this client.
	 */
	host = "services.oscnet.org";

	/* real
	 * The GECOS (real name) of the client.
	 */
	real = "Operator Services";
};

/* The general {} block defines general configuration options. */
general {
	/* (*)chan
	 * The channel the client joins and sends certain
	 * messages to.
	 * Comment to disable.
	 */
	chan = "#services";

	/* (*)silent
	 * If you want to prevent services from sending
	 * WALLOPS about things uncomment this.
	 */
	#silent;

	/* (*)join_chans
	 * Should we join all registered channels?
	 * Please note that this is only here because some people like
	 * having a services client in the channel.
	 * ENABLING THIS WILL *DRASTICALLY* INCREASE CPU USAGE!
	 */
	join_chans;

	/* (*)leave_chans
	 * Do we leave registered channels after everyone else has left?
	 * Turning this off serves little purpose.
	 */
	leave_chans;

	/* (*)uflags
	 * The default flags to set for usernames upon registration.
	 * Valid values are: hold, neverop, noop, hidemail, and none.
	 */
	uflags = { none; };

	/* (*)cflags
	 * The default flags to set for channels upon registration.
	 * Valid values are: hold, neverop, secure, verbose, and none.
	 */
	cflags = { secure; verbose; };

	/* (*)raw
	 * Do you want to allow SRAs to use the RAW and INJECT commands?
	 * These commands are for debugging. If you don't know how to use them
	 * then don't enable them. They are not supported.
	 */
	#raw;

	/* (*)flood_msgs
	 * Do you want services to detect floods?
	 * Set to how many messages before a flood is triggered.
	 * If services receives `flood_msgs' within `flood_time' the user will
	 * trigger the flood protection.
	 * Setting this to zero disables flood protection.
	 */
	flood_msgs = 7;

	/* (*)flood_time
	 * Do you want services to detect floods?
	 * Set to how long before the counter resets.
	 * If services receives `flood_msgs' within `flood_time' the user will
	 * trigger the flood protection.
	 */
	flood_time = 10;

	/* (*)kline_time
	 * The default expire time for KLINE's in days.
	 * Setting this to 0 makes all KLINE's permanent.
	 */
	kline_time = 7;

	/* (*)sras
	 * Enter at least one services root administrator.  This must be a registered
	 * username.  If the username doesn't yet exist you'll need to REHASH this
	 * file before changes take affect.
	 * Define as many of these as you'd like.
	 */
	sras = { "nenolod"; };
};

/* You may also specify other files for inclusion.
 * For example:
 *
 * include "etc/sras.conf";
 */
