/*
 * This is an example configuration for Atheme detailing the "traditional" mode.
 *
 * All statements end in semi-colons (';').
 * Shell style, C style, and C++ style comments may be used.
 *
 * Items marked with "(*)" are reconfigurable at runtime via REHASH.
 *
 * $Id: example-traditional.conf 853 2005-07-16 08:44:37Z nenolod $
 */

/* Protocol module.
 *
 * Please select a protocol module. Different servers use different protocols.
 * Below is a listing of ircd's known to work with the various protocol modules
 * available.
 *
 * Asuka 1.2.1 or later                                protocol/asuka.so
 * Bahamut 1.8.x                                       protocol/bahamut.so
 * Beware IRCd (bircd)                                 protocol/bircd.so
 * Chunky Monkey IRCd                                  protocol/monkey.so
 * dancer-ircd/hyperion                                protocol/hyperion.so
 * DreamForge 4.6.7 or later                           protocol/dreamforge.so
 * EFnet IRCd's (hybrid, ratbox, csircd)               protocol/ratbox.so
 * IRCNet ircd (ircd 2.10/2.11)                        protocol/ircnet.so
 * ircu 2.10.11.07 or later                            protocol/undernet.so
 * InspIRCd 1.0b4 or later                             protocol/inspircd.so
 * PleXusIRCd 2.0.6 or later                           protocol/plexus.so
 * Scylla (svn 14 or later)                            protocol/scylla.so
 * ShadowIRCd 3.3/3.6 family                           protocol/shadowircd.so
 * SorceryNet 1.3.1 or later                           protocol/sorcery.so
 * UnrealIRCd 3.1/3.2                                  protocol/unreal.so
 *
 * If your IRCd vendor has supplied a module file, build it and load it here
 * instead of one above.
 */
loadmodule "protocol/ratbox.so";

/* Database backend module.
 * 
 * Please select a database backend module. Different backends allow for
 * different ways in which the services data can be manipulated. YOU MAY
 * ONLY HAVE ONE OF THESE BACKENDS LOADED.
 * 
 * The following backends are available:
 * 
 * Atheme 0.1 flatfile database format                 backend/flatfile.so
 * PostgreSQL                                          backend/postgresql.so
 * 
 * Most networks will want flatfile. The PostgreSQL backend requires
 * PostgreSQL to be installed on the machine.
 */
loadmodule "backend/flatfile.so";
 
/* The serverinfo{} block defines how we
 * appear on the IRC network.
 */
serverinfo {
	/* name
	 * The server name that this program uses on the IRC network.
	 * This is the name you'll have to use in C:/N:Lines.
	 */
	name = "services.oscnet.org";

	/* desc
	 * The ``server comment'' we send to the IRC network.
	 * If you want server hiding, prefix your desc with "(H)"
	 */
	desc = "Atheme IRC Services";

	/* numeric
	 * Some protocol drivers (IRCNet, Ratbox2, Undernet) require a server id,     
	 * commonly refered to as a numeric. Please consult your ircd's documentation
	 * when providing this value. 
	 *
	 * Most protocol drivers just ignore it though.
	 */
	numeric = "000A";

	/* (*)recontime
	 * The number of seconds before we reconnect to the uplink.
	 */
	recontime = 10;

	/* (*)restarttime
	 * The number of seconds before we restart.
	 */
	restarttime = 10;

	/* (*)netname
	 * The name of your network.
	 */
	netname = "misconfigured network";

	/* (*)adminname
	 * The name of the person running this service.
	 */
	adminname = "misconfigured admin";

	/* (*)adminemail
	 * The email address of the person running this service.
	 */
	adminemail = "misconfigured@admin.tld";

	/* (*)mta
	 * The full path to your mail transfer agent.
	 * This is used for email authorization and password retrieval.
	 */
	mta = "/usr/sbin/sendmail";

	/* (*)loglevel
	 * Specify the minimum level of logging information to record
	 * in the main Atheme logfile.  Valid values (from highest to lowest) are:
	 * debug, error, info, and none.
	 */
	loglevel = error;

	/* (*)maxusers
	 * What are the maximum usernames that one email address can register?
	 */
	maxusers = 5;

	/* (*)maxchans
	 * What are the maximum channels that one username can register?
	 */
	maxchans = 5;

	/* (*)mdlimit
	 * How many metadata entries can be added to an object?
	 */
	mdlimit = 30;

	/* (*)auth
	 * What type of username registration authorization do you want?
	 * If "email," Atheme will send a confirmation email to the address to
	 * ensure it's valid. If "none," no message will be sent and the username
	 * will be fully registered.
	 * Valid values are: email, none.
	 */
	auth = none;

	/* casemapping
	 * Specify the casemapping to use. Almost all TSora (and any that follow
	 * the RFC correctly) ircds will use rfc1459 casemapping. Bahamut, Unreal,
	 * and other ``Dalnet'' ircds will use ascii casemapping.
	 * Valid values are: rfc1459, ascii.
	 */
	casemapping = rfc1459;
};

uplink "irc.example.net" {
        // host
        // The hostname to connect to.
        host = "127.0.0.1";
           
        // vhost
        // The source IP to connect from, used on machines with multiple interfaces.
        #vhost = "202.119.187.31";
  
        // password
        // The password used for linking.
        password = "linkage";
   
        // port
        // The port used for linking.
        port = 6667;
        
        // numeric
        // If your server uses a numeric, this numeric will be used for overriding
        // the default one.
        numeric = "000E";
};

nickserv {
	// In order to use NickServ, we must enable it, since it is an optional service.
	enable;

	// If you want NickServ to tell people about how great it is, enable the directive
	// below.
	spam;

	/* (*)nick
	 * The nickname we want NickServ to have. 
	 */
	nick = "NickServ";

	/* user
	 * The username we want NickServ to have.
	 */
	user = "NickServ";

	/* host
	 * The hostname we want NickServ to have.
	 */
	host = "services.oscnet.org";

	/* real
	 * The realname (gecos) information we want NickServ to have.
	 */
	real = "Nickname Services";
};

/* The chanserv {} block defines settings specific to the channel
 * services client on the IRC network.
 */
chanserv {
	/* (*)nick
	 * The nickname we want the client to have.
	 */
	nick = "ChanServ";

	/* user
	 * The username we want the client to have.
	 */
	user = "ChanServ";

	/* host
	 * The hostname we want the client to have.
	 */
	host = "services.oscnet.org";

	/* real
	 * The GECOS of the client.
	 */
	real = "Channel Services";

        /* fantasy
         * Do you want to enable fantasy commands? This can
         * use a lot of CPU up, and will only work if you have
         * join_chans (in general) enabled as well.
         */
        fantasy;
};

/* The global {} block defines settings concerning the global noticer. */
global {
	/* nick
	 * Sets the nick used for sending out a global notice.
	 */
	nick = "OSCNet";

	/* user
	 * Sets the username used for this client.
	 */
	user = "oscnet";

	/* host
	 * The hostname used for this client.
	 */
	host = "oscnet.org";

	/* real
	 * The GECOS (real name) of the client.
	 */
	real = "Network Announcements";
};

operserv {
	/* nick
	 * The nickname we want the Operator Service to have.
	 */
	nick = "OperServ";

	/* user
	 * Sets the username used for this client.
	 */
	user = "services";

	/* host
	 * The hostname used for this client.
	 */
	host = "services.oscnet.org";

	/* real
	 * The GECOS (real name) of the client.
	 */
	real = "Operator Services";
};

/* If you are using a SQL database, you will need to change these settings. */
database {
        /* user
         * Username to use when connecting to the DBMS server.
         */
        user = "atheme";

        /* password
         * Password to use when connecting to the DBMS server.
         */
        password = "atheme";

        /* host
         * Host the DBMS server is running on.
         */
        host = "localhost";

        /* port (optional)
         * Used to change the port used for connecting to the DBMS.
         */
        #port = 3306; 

        /* database
         * The SQL database to use with Atheme.
         */
        database = "atheme";
};

/* The general {} block defines general configuration options. */
general {
	/* (*)chan
	 * The channel the client joins and sends certain
	 * messages to.
	 * Comment to disable.
	 */
	chan = "#services";

	/* (*)silent
	 * If you want to prevent services from sending
	 * WALLOPS about things uncomment this.
	 */
	#silent;

	/* (*)join_chans
	 * Should ChanServ join all registered channels?
	 * Please note that this is only here because some people like
	 * having a services client in the channel.
	 */
	join_chans;

	/* (*)leave_chans
	 * Do we leave registered channels after everyone else has left?
	 * Turning this off serves little purpose, except to mark "official"
	 * network channels, by keeping them open.
	 */
	leave_chans;

	/* (*)secure
	 * Do you want to require the use of /msg <service>@<services host>?
	 * Turning this on helps protect against spoofers, but is disabled
	 * as most networks do not presently use it.
	 */
	#secure;

	/* (*)uflags
	 * The default flags to set for usernames upon registration.
	 * Valid values are: hold, neverop, noop, hidemail, and none.
	 */
	uflags = { none; };

	/* (*)cflags
	 * The default flags to set for channels upon registration.
	 * Valid values are: hold, neverop, secure, verbose, and none.
	 */
	cflags = { secure; verbose; };

	/* (*)raw
	 * Do you want to allow SRAs to use the RAW and INJECT commands?
	 * These commands are for debugging. If you don't know how to use them
	 * then don't enable them. They are not supported.
	 */
	#raw;

	/* (*)flood_msgs
	 * Do you want services to detect floods?
	 * Set to how many messages before a flood is triggered.
	 * If services receives `flood_msgs' within `flood_time' the user will
	 * trigger the flood protection.
	 * Setting this to zero disables flood protection.
	 */
	flood_msgs = 7;

	/* (*)flood_time
	 * Do you want services to detect floods?
	 * Set to how long before the counter resets.
	 * If services receives `flood_msgs' within `flood_time' the user will
	 * trigger the flood protection.
	 */
	flood_time = 10;

	/* (*)kline_time
	 * The default expire time for KLINE's in days.
	 * Setting this to 0 makes all KLINE's permanent.
	 */
	kline_time = 7;

	/* commit_interval
	 * The time between database writes in minutes.
	 */
	commit_interval = 5;

	/* (*)expire
	 * The number of days before inactive registrations are expired.
	 */
	expire = 30;

	/* (*)sras
	 * Enter at least one services root administrator.  This must be a registered
	 * nickname.  If the nickname hasn't been registered yet exist you'll need to REHASH this
	 * file before changes take affect.
	 * Define as many of these as you'd like.
	 */
	sras = { "nenolod"; };
};

/* You may also specify other files for inclusion.
 * For example:
 *
 * include "etc/sras.conf";
 */
