Index: include/atheme.h
===================================================================
--- include/atheme.h	(revision 2233)
+++ include/atheme.h	(revision 2235)
@@ -31,6 +31,7 @@
 #include "linker.h"
 #include "culture.h"
 #include "callback.h"
+#include "compat.h"
 
 #ifndef timersub
 #define timersub(tvp, uvp, vvp)                                         \
Index: include/extern.h
===================================================================
--- include/extern.h	(revision 2233)
+++ include/extern.h	(revision 2235)
@@ -23,7 +23,7 @@
 E int BlockHeapDestroy(BlockHeap *bh);
 
 E void initBlockHeap(void);
-E void BlockHeapUsage(BlockHeap *bh, size_t * bused, size_t * bfree,
+E void BlockHeapUsage(BlockHeap *bh, size_t * bused, size_t * bfreem,
 		      size_t * bmemusage);
 
 E boolean_t cold_start;
Index: include/serno.h
===================================================================
--- include/serno.h	(revision 2233)
+++ include/serno.h	(revision 2235)
@@ -1 +1 @@
-#define SERNO "20050912-2231"
+#define SERNO "20050914-2233"
Index: include/balloc.h
===================================================================
--- include/balloc.h	(revision 2233)
+++ include/balloc.h	(revision 2235)
@@ -10,37 +10,41 @@
 #ifndef BALLOC_H
 #define BALLOC_H
 
-struct Block
+struct block_
 {
-  size_t alloc_size;
-  struct Block *next;     /* Next in our chain of blocks */
-  void *elems;            /* Points to allocated memory */
-  list_t free_list;
-  list_t used_list;
+	size_t alloc_size;
+	node_t self;
+	void  *element;            /* Points to allocated memory */
+	list_t free_list;
+	list_t used_list;
 };
-typedef struct Block Block;
+typedef struct block_ block_t;
 
-struct MemBlock
+struct chunk_
 {
-#ifdef DEBUG_BALLOC
-  unsigned long magic;
-#endif
-  node_t self;
-  Block *block;           /* Which block we belong to */
+	node_t   self;
+	block_t *parent;           /* Which block we belong to */
 };
+typedef struct chunk_ chunk_t;
 
-typedef struct MemBlock MemBlock;
-
 /* information for the root node of the heap */
-struct BlockHeap
+struct heap_
 {
-  node_t hlist;
-  size_t elemSize;        /* Size of each element to be stored */
-  unsigned long elemsPerBlock;    /* Number of elements per block */
-  unsigned long blocksAllocated;  /* Number of blocks allocated */
-  unsigned long freeElems;                /* Number of free elements */
-  Block *base;            /* Pointer to first block */
+	node_t hlist;
+	char *name;
+	size_t chunk_size;        /* Size of each element to be stored */
+	unsigned long elements;   /* Number of elements per block */
+	unsigned long allocated;  /* Number of blocks allocated */
+	unsigned long freecount;  /* Number of free elements */
+	list_t blocks;            /* old blocks.head == base */
 };
-typedef struct BlockHeap BlockHeap;
+typedef struct heap_ heap_t;
 
+extern void init_balloc(void);
+extern heap_t *bcreate(char *name, size_t elemsize, int elemsperblock);
+extern void *balloc(heap_t *h);
+extern boolean_t bfree(heap_t *h, void *ptr);
+extern boolean_t bdelete(heap_t *h);
+extern void bstat(heap_t *h, size_t *bused, size_t *bavail, size_t *bmemusage);
+
 #endif
Index: include/compat.h
===================================================================
--- include/compat.h	(revision 0)
+++ include/compat.h	(revision 2235)
@@ -0,0 +1,15 @@
+/*
+ * Copyright (c) 2005 Atheme Development Group
+ * Rights to this code are as documented in doc/LICENSE.
+ *
+ * Compatibility with classic block allocator.
+ *
+ * $Id$
+ */
+
+#ifndef COMPAT_H
+#define COMPAT_H
+
+typedef void BlockHeap;
+
+#endif

Property changes on: include/compat.h
___________________________________________________________________
Name: svn:keywords
   + Id

Index: ChangeLog
===================================================================
--- ChangeLog	(revision 2233)
+++ ChangeLog	(revision 2235)
@@ -1,3 +1,12 @@
+pfish       2005/09/14 03:07:54 UTC	(20050914-2233)
+  Log:
+  fix debug info not showing what module is being unloaded, and also be consistant by sending a wallops as module_load does.
+  
+
+  Modified:
+	trunk/src/module.c (File Modified) 
+
+
 nenolod     2005/09/12 23:51:10 UTC	(20050912-2231)
   Log:
   - Because we can't check if the first byte of NULL is NULL or not.
Index: src/Makefile.in
===================================================================
--- src/Makefile.in	(revision 2233)
+++ src/Makefile.in	(revision 2235)
@@ -28,6 +28,7 @@
 	atheme.c	\
 	cmode.c		\
 	commandtree.c	\
+	compat.c	\
 	conf.c		\
 	confparse.c	\
 	crypto.c	\
Index: src/compat.c
===================================================================
--- src/compat.c	(revision 0)
+++ src/compat.c	(revision 2235)
@@ -0,0 +1,42 @@
+/*
+ * Copyright (c) 2005 Atheme Development Group
+ * Rights to this code are as documented in doc/LICENSE.
+ *
+ * Compatibility with Atheme 0.2 block allocator (read: craq++)
+ *
+ * $Id$
+ */
+
+#include "atheme.h"
+
+BlockHeap *BlockHeapCreate(size_t elemsize, int elemsperblock)
+{
+	static char buf[BUFSIZE];
+
+	/* please no IOCCC entries --nenolod */
+	strlcpy(buf, "unnamed_heap-", BUFSIZE);
+	strlcat(buf, gen_pw(16), BUFSIZE);
+
+	return (BlockHeap *) bcreate(buf, elemsize, elemsperblock);
+}
+
+void *BlockHeapAlloc(BlockHeap *bh)
+{
+	return balloc((heap_t *) bh);
+}
+
+int BlockHeapFree(BlockHeap *bh, void *ptr)
+{
+	return bfree((heap_t *) bh, ptr) ? 0 : 1;
+}
+
+int BlockHeapDestroy(BlockHeap *bh)
+{
+	return bdelete((heap_t *) bh) ? 0 : 1;
+}
+
+void BlockHeapUsage(BlockHeap *bh, size_t *bused, size_t *bfreem, size_t *bmemusage)
+{
+	bstat((heap_t *) bh, bused, bfreem, bmemusage);
+}
+

Property changes on: src/compat.c
___________________________________________________________________
Name: svn:keywords
   + Id

Index: src/function.c
===================================================================
--- src/function.c	(revision 2233)
+++ src/function.c	(revision 2235)
@@ -16,23 +16,6 @@
 #undef HAVE_GETTIMEOFDAY
 #endif
 
-char ch[26] = "abcdefghijklmnopqrstuvwxyz";
-
-char *gen_pw(int8_t sz)
-{
-        int8_t i;
-        char *buf = malloc(sz);
-
-        for (i = 0; i < sz; i++)
-        {
-                buf[i] = ch[rand() % 26];
-        }
-
-        buf[sz] = 0;
-
-        return buf;
-}
-
 #ifdef HAVE_GETTIMEOFDAY
 /* starts a timer */
 void s_time(struct timeval *sttime)
Index: libatheme/string.c
===================================================================
--- libatheme/string.c	(revision 2233)
+++ libatheme/string.c	(revision 2235)
@@ -9,6 +9,24 @@
 
 #include "atheme.h"
 
+/* generates a random password hash */
+char ch[26] = "abcdefghijklmnopqrstuvwxyz";
+
+char *gen_pw(int8_t sz)
+{
+        int8_t i;
+        char *buf = smalloc(sz);
+
+        for (i = 0; i < sz; i++)
+        {
+                buf[i] = ch[rand() % 26];
+        }
+
+        buf[sz] = 0;
+
+        return buf;
+}
+
 #ifndef HAVE_STRLCAT
 /* These functions are taken from Linux. */
 size_t strlcat(char *dest, const char *src, size_t count)
Index: libatheme/libatheme.c
===================================================================
--- libatheme/libatheme.c	(revision 2233)
+++ libatheme/libatheme.c	(revision 2235)
@@ -14,7 +14,7 @@
 	slog(LG_DEBUG, "libatheme_init(): starting up...");
 
 	event_init();
-	initBlockHeap();
+	init_balloc();
 	init_dlink_nodes();
 	hooks_init();
 	callback_init();
Index: libatheme/balloc.c
===================================================================
--- libatheme/balloc.c	(revision 2233)
+++ libatheme/balloc.c	(revision 2235)
@@ -3,29 +3,13 @@
  * Rights to this code are documented in doc/LICENSE.
  *
  * This file contains the block allocator.
- * This file was lifted from ircd-ratbox.
  *
  * $Id$
  */
 
 #include "atheme.h"
 
-/*
- * Somewhat rewritten/cleaned up on July 9, 2005
- * by nenolod.
- *
- * I removed the broken code that used /dev/zero,
- * as it depended on code that never existed, and the
- * code was unreached.
- *
- * Here's how the block allocator works this time
- * around:
- *
- * On systems, which support it, we use the native mmap
- * interface. On systems that do not have mmap, we provide
- * a shim around our safe malloc routine smalloc().
- */
-
+/* please no IOCCC entries --nenolod */
 #ifndef _WIN32
 #  ifdef HAVE_MMAP		/* We've got mmap() that is good */
 #   include <sys/mman.h>
@@ -39,16 +23,17 @@
 # undef HAVE_MMAP		/* broken on windows */
 #endif
 
+/* We don't have mmap()? That's ok, we have a shim. --nenolod */
 #ifndef HAVE_MMAP
-#define MAP_PRIVATE 0
-#define MAP_ANON 0
-#define MAP_FAILED 0
-#define PROT_READ 0
-#define PROT_WRITE 0
+# define MAP_PRIVATE 0
+# define MAP_ANON 0
+# define MAP_FAILED 0
+# define PROT_READ 0
+# define PROT_WRITE 0
 #endif
 
-static int newblock(BlockHeap *bh);
-static int BlockHeapGarbageCollect(BlockHeap *);
+static boolean_t newblock(heap_t *);
+static boolean_t bdispose(heap_t *);
 static void block_heap_gc(void *unused);
 static list_t heap_lists;
 
@@ -117,17 +102,22 @@
  * Side Effects: Initializes the block heap
  */
 
-void initBlockHeap(void)
+void init_balloc(void)
 {
 	event_add("block_heap_gc", block_heap_gc, NULL, 60);
 }
 
 /*
- * static void *get_block(size_t size)
+ * get_block()
  * 
- * Input: Size of block to allocate
- * Output: Pointer to new block
- * Side Effects: None
+ * Inputs:
+ *       Size of block to allocate
+ *
+ * Output:
+ *       Pointer to new block
+ *
+ * Side Effects:
+ *       New memory is mapped (or allocated if your system sucks)
  */
 static void *get_block(size_t size)
 {
@@ -140,103 +130,111 @@
 	return (ptr);
 }
 
-
+/*
+ * block_heap_gc()
+ *
+ * Inputs:
+ *       none
+ *
+ * Outputs:
+ *       none
+ *
+ * Side Effects:
+ *       walks the heap and performs garbage collection on
+ *       the fly
+ *
+ * Notes:
+ *       could be rather effective as a thread
+ */
 static void block_heap_gc(void *unused)
 {
 	node_t *ptr, *tptr;
 
 	LIST_FOREACH_SAFE(ptr, tptr, heap_lists.head)
-		BlockHeapGarbageCollect(ptr->data);
+		bdispose(ptr->data);
 }
 
-/* ************************************************************************ */
-/* FUNCTION DOCUMENTATION:                                                  */
-/*    newblock                                                              */
-/* Description:                                                             */
-/*    Allocates a new block for addition to a blockheap                     */
-/* Parameters:                                                              */
-/*    bh (IN): Pointer to parent blockheap.                                 */
-/* Returns:                                                                 */
-/*    0 if successful, 1 if not                                             */
-/* ************************************************************************ */
-
-static int newblock(BlockHeap *bh)
+/*
+ * newblock()
+ *
+ * Inputs:
+ *       a memory heap to allocate new memory to
+ *
+ * Outputs:
+ *       TRUE if successful, FALSE if not.
+ *
+ * Side Effects:
+ *       Memory is allocated to the heap given to the routine
+ */
+static boolean_t newblock(heap_t *bh)
 {
-	MemBlock *newblk;
-	Block *b;
+	chunk_t *newblk;
+	block_t *b;
 	unsigned long i;
 	void *offset;
 
 	/* Setup the initial data structure. */
-	b = (Block *)scalloc(1, sizeof(Block));
+	b = (block_t *) scalloc(1, sizeof(block_t));
 
 	if (b == NULL)
-		return (1);
+	{
+		slog(LG_DEBUG, "newblock(): b == NULL, failure");
+		return FALSE;
+	}
 
 	b->free_list.head = b->free_list.tail = NULL;
 	b->used_list.head = b->used_list.tail = NULL;
-	b->next = bh->base;
 
-	b->alloc_size = (bh->elemsPerBlock + 1) * (bh->elemSize + sizeof(MemBlock));
+	b->alloc_size = (bh->elements + 1) * (bh->chunk_size + sizeof(chunk_t));
 
-	b->elems = get_block(b->alloc_size);
+	b->element = get_block(b->alloc_size);
 
-	if (b->elems == NULL)
-		return (1);
+	if (b->element == NULL)
+		return FALSE;
 
-	offset = b->elems;
+	offset = b->element;
 
 	/* Setup our blocks now */
-	for (i = 0; i < bh->elemsPerBlock; i++)
+	for (i = 0; i < bh->elements; i++)
 	{
 		void *data;
-		newblk = (void *)offset;
-		newblk->block = b;
-#ifdef DEBUG_BALLOC
-		newblk->magic = BALLOC_MAGIC;
-#endif
-		data = (void *)((size_t) offset + sizeof(MemBlock));
-		newblk->block = b;
+		newblk = (chunk_t *) offset;
+		data = (void *)((size_t) offset + sizeof(chunk_t));
+		newblk->parent = b;
 		node_add(data, &newblk->self, &b->free_list);
-		offset = (unsigned char *)((unsigned char *)offset + bh->elemSize + sizeof(MemBlock));
+		offset = (void *)(offset + bh->chunk_size + sizeof(chunk_t));
 	}
 
-	++bh->blocksAllocated;
-	bh->freeElems += bh->elemsPerBlock;
-	bh->base = b;
+	++bh->allocated;
+	bh->freecount += bh->elements;
+	node_add(b, &b->self, &bh->blocks);
 
-	return (0);
+	return TRUE;
 }
 
-
-/* ************************************************************************ */
-/* FUNCTION DOCUMENTATION:                                                  */
-/*    BlockHeapCreate                                                       */
-/* Description:                                                             */
-/*   Creates a new blockheap from which smaller blocks can be allocated.    */
-/*   Intended to be used instead of multiple calls to malloc() when         */
-/*   performance is an issue.                                               */
-/* Parameters:                                                              */
-/*   elemsize (IN):  Size of the basic element to be stored                 */
-/*   elemsperblock (IN):  Number of elements to be stored in a single block */
-/*         of memory.  When the blockheap runs out of free memory, it will  */
-/*         allocate elemsize * elemsperblock more.                          */
-/* Returns:                                                                 */
-/*   Pointer to new BlockHeap, or NULL if unsuccessful                      */
-/* ************************************************************************ */
-BlockHeap *BlockHeapCreate(size_t elemsize, int elemsperblock)
+/*
+ * bcreate()
+ *
+ * Inputs:
+ *       heap name, element size, amount of elements per block
+ *
+ * Outputs:
+ *       heap object
+ *
+ * Side Effects:
+ *       sets up a block allocator
+ */
+heap_t *bcreate(char *name, size_t elemsize, int elemsperblock)
 {
-	BlockHeap *bh;
+	heap_t *h;
 
 	/* Catch idiotic requests up front */
-	if ((elemsize <= 0) || (elemsperblock <= 0))
-	{
-		blockheap_fail("Attempting to BlockHeapCreate idiotic sizes");
-	}
+	if (!name || (elemsize <= 0) || (elemsperblock <= 0))
+		return NULL;
 
 	/* Allocate our new BlockHeap */
-	bh = (BlockHeap *)scalloc(1, sizeof(BlockHeap));
-	if (bh == NULL)
+	h = (heap_t *)scalloc(1, sizeof(heap_t));
+	if (h == NULL)
 	{
 		slog(LG_INFO, "Attempt to calloc() failed: (%s:%d)", __FILE__, __LINE__);
 		runflags |= RF_SHUTDOWN;
@@ -249,244 +247,228 @@
 		elemsize &= ~(sizeof(void *) - 1);
 	}
 
-	bh->elemSize = elemsize;
-	bh->elemsPerBlock = elemsperblock;
-	bh->blocksAllocated = 0;
-	bh->freeElems = 0;
-	bh->base = NULL;
+	h->name = sstrdup(name);
+	h->chunk_size = elemsize;
+	h->elements = elemsperblock;
+	h->allocated = 0;
+	h->freecount = 0;
 
+	h->blocks.head = h->blocks.tail = NULL;
+	h->blocks.count = 0;
+
 	/* Be sure our malloc was successful */
-	if (newblock(bh))
+	if (!newblock(h))
 	{
-		if (bh != NULL)
-			free(bh);
+		if (h != NULL)
+			free(h);
 		slog(LG_INFO, "newblock() failed");
 		runflags |= RF_SHUTDOWN;
 	}
 
-	if (bh == NULL)
-	{
-		blockheap_fail("bh == NULL when it shouldn't be");
-	}
-	node_add(bh, &bh->hlist, &heap_lists);
-	return (bh);
+	if (h == NULL)
+		blockheap_fail("h == NULL when it shouldn't be");
+
+	node_add(h, &h->hlist, &heap_lists);
+	return (h);
 }
 
-/* ************************************************************************ */
-/* FUNCTION DOCUMENTATION:                                                  */
-/*    BlockHeapAlloc                                                        */
-/* Description:                                                             */
-/*    Returns a pointer to a struct within our BlockHeap that's free for    */
-/*    the taking.                                                           */
-/* Parameters:                                                              */
-/*    bh (IN):  Pointer to the Blockheap.                                   */
-/* Returns:                                                                 */
-/*    Pointer to a structure (void *), or NULL if unsuccessful.             */
-/* ************************************************************************ */
-
-void *BlockHeapAlloc(BlockHeap *bh)
+/*
+ * balloc()
+ *
+ * Inputs:
+ *       heap to allocate from
+ *
+ * Output:
+ *       pointer to usable memory from the allocator
+ *
+ * Side Effects:
+ *       attempts to allocate more memory if it runs out
+ */
+void *balloc(heap_t *h)
 {
-	Block *walker;
+	node_t *walker;
 	node_t *new_node;
+	block_t *b;
 
-	if (bh == NULL)
+	if (h == NULL)
 	{
-		blockheap_fail("Cannot allocate if bh == NULL");
+		blockheap_fail("balloc(): called against nonexistant heap object");
 	}
 
-	if (bh->freeElems == 0)
+	if (h->freecount == 0)
 	{
-		/* Allocate new block and assign */
-		/* newblock returns 1 if unsuccessful, 0 if not */
-
-		if (newblock(bh))
+		if (!newblock(h))
 		{
-			/* That didn't work..try to garbage collect */
-			BlockHeapGarbageCollect(bh);
-			if (bh->freeElems == 0)
-			{
-				slog(LG_INFO, "newblock() failed and garbage collection didn't help");
-				runflags |= RF_SHUTDOWN;
-			}
+			/* newblock failed, lets try to clean up our mess */
+			bdispose(h);
+
+			if (h->freecount == 0)
+				blockheap_fail("newblock() failed and garbage collection didn't do anything");
 		}
 	}
 
-	for (walker = bh->base; walker != NULL; walker = walker->next)
+	LIST_FOREACH(walker, h->blocks.head)
 	{
-		if (LIST_LENGTH(&walker->free_list) > 0)
+		b = walker->data;
+
+		if (LIST_LENGTH(&b->free_list) > 0)
 		{
-			bh->freeElems--;
-			new_node = walker->free_list.head;
-			node_move(new_node, &walker->free_list, &walker->used_list);
+			h->freecount--;
+			new_node = b->free_list.head;
+			node_move(new_node, &b->free_list, &b->used_list);
 			if (new_node->data == NULL)
 				blockheap_fail("new_node->data is NULL and that shouldn't happen!!!");
-			memset(new_node->data, 0, bh->elemSize);
+			memset(new_node->data, 0, h->chunk_size);
 			return (new_node->data);
 		}
 	}
-	blockheap_fail("BlockHeapAlloc failed, giving up");
+	blockheap_fail("balloc() failed, giving up");
 	return NULL;
 }
 
-
-/* ************************************************************************ */
-/* FUNCTION DOCUMENTATION:                                                  */
-/*    BlockHeapFree                                                         */
-/* Description:                                                             */
-/*    Returns an element to the free pool, does not free()                  */
-/* Parameters:                                                              */
-/*    bh (IN): Pointer to BlockHeap containing element                      */
-/*    ptr (in):  Pointer to element to be "freed"                           */
-/* Returns:                                                                 */
-/*    0 if successful, 1 if element not contained within BlockHeap.         */
-/* ************************************************************************ */
-int BlockHeapFree(BlockHeap *bh, void *ptr)
+/*
+ * bfree()
+ *
+ * Inputs:
+ *       parent heap, memory location to release
+ *
+ * Output:
+ *       TRUE on success, FALSE on failure
+ *
+ * Side Effects:
+ *       A memory chunk is marked as free.
+ */
+boolean_t bfree(heap_t *h, void *ptr)
 {
-	Block *block;
-	struct MemBlock *memblock;
+	block_t *block;
+	chunk_t *chunk;
 
-	if (bh == NULL)
+	if (h == NULL)
 	{
-
-		slog(LG_DEBUG, "balloc.c:BlockHeapFree() bh == NULL");
-		return (1);
+		slog(LG_DEBUG, "balloc.c:bfree() h == NULL");
+		return FALSE;
 	}
 
 	if (ptr == NULL)
 	{
-		slog(LG_DEBUG, "balloc.c:BlockHeapFree() ptr == NULL");
-		return (1);
+		slog(LG_DEBUG, "balloc.c:bfree() ptr == NULL");
+		return FALSE;
 	}
 
-	memblock = (void *)((size_t) ptr - sizeof(MemBlock));
-#ifdef DEBUG_BALLOC
-	if (memblock->magic != BALLOC_MAGIC)
-	{
-		blockheap_fail("memblock->magic != BALLOC_MAGIC");
-		runflags |= RF_SHUTDOWN;
-	}
-#endif
-	if (memblock->block == NULL)
-	{
-		blockheap_fail("memblock->block == NULL, not a valid block?");
-		runflags |= RF_SHUTDOWN;
-	}
+	chunk = (void *)((size_t) ptr - sizeof(chunk_t));
 
-	block = memblock->block;
-	bh->freeElems++;
-	node_move(&memblock->self, &block->used_list, &block->free_list);
-	return (0);
+	if (chunk->parent == NULL)
+		blockheap_fail("chunk->parent == NULL, not a valid chunk?");
+
+	block = chunk->parent;
+	h->freecount++;
+	node_move(&chunk->self, &block->used_list, &block->free_list);
+	return TRUE;
 }
 
-/* ************************************************************************ */
-/* FUNCTION DOCUMENTATION:                                                  */
-/*    BlockHeapGarbageCollect                                               */
-/* Description:                                                             */
-/*    Performs garbage collection on the block heap.  Any blocks that are   */
-/*    completely unallocated are removed from the heap.  Garbage collection */
-/*    will never remove the root node of the heap.                          */
-/* Parameters:                                                              */
-/*    bh (IN):  Pointer to the BlockHeap to be cleaned up                   */
-/* Returns:                                                                 */
-/*   0 if successful, 1 if bh == NULL                                       */
-/* ************************************************************************ */
-static int BlockHeapGarbageCollect(BlockHeap *bh)
+/*
+ * bdispose()
+ *
+ * Inputs:
+ *       heap to garbage collect
+ *
+ * Output:
+ *       TRUE if successful, FALSE if not
+ *
+ * Side Effects:
+ *       performs garbage collection
+ */
+static boolean_t bdispose(heap_t *h)
 {
-	Block *walker, *last;
-	if (bh == NULL)
-	{
-		return (1);
-	}
+	node_t *n, *n2;
+	block_t *b;
 
-	if (bh->freeElems < bh->elemsPerBlock || bh->blocksAllocated == 1)
-	{
-		/* There couldn't possibly be an entire free block.  Return. */
-		return (0);
-	}
+	if (h == NULL)
+		return FALSE;
 
-	last = NULL;
-	walker = bh->base;
+	if (h->freecount < h->elements || h->allocated == 1)
+		return TRUE;
 
-	while (walker != NULL)
+	LIST_FOREACH_SAFE(n, n2, h->blocks.head)
 	{
-		if ((LIST_LENGTH(&walker->free_list) == bh->elemsPerBlock) != 0)
+		b = n->data;
+ 
+		if ((LIST_LENGTH(&b->free_list) == h->elements) != 0)
 		{
-			free_block(walker->elems, walker->alloc_size);
-			if (last != NULL)
-			{
-				last->next = walker->next;
-				if (walker != NULL)
-					free(walker);
-				walker = last->next;
-			}
-			else
-			{
-				bh->base = walker->next;
-				if (walker != NULL)
-					free(walker);
-				walker = bh->base;
-			}
-			bh->blocksAllocated--;
-			bh->freeElems -= bh->elemsPerBlock;
+			free_block(b->element, b->alloc_size);
+			node_del(n, &h->blocks);
+			free(b);
+			h->allocated--;
+			h->freecount -= h->elements;
 		}
-		else
-		{
-			last = walker;
-			walker = walker->next;
-		}
 	}
-	return (0);
+
+	return TRUE;
 }
 
-/* ************************************************************************ */
-/* FUNCTION DOCUMENTATION:                                                  */
-/*    BlockHeapDestroy                                                      */
-/* Description:                                                             */
-/*    Completely free()s a BlockHeap.  Use for cleanup.                     */
-/* Parameters:                                                              */
-/*    bh (IN):  Pointer to the BlockHeap to be destroyed.                   */
-/* Returns:                                                                 */
-/*   0 if successful, 1 if bh == NULL                                       */
-/* ************************************************************************ */
-int BlockHeapDestroy(BlockHeap *bh)
+/*
+ * bdelete()
+ *
+ * Inputs:
+ *       block heap allocator to shut down/dispose
+ *
+ * Output:
+ *       TRUE on success, FALSE on failure
+ *
+ * Side Effects:
+ *       a block allocator is destroyed
+ */
+boolean_t bdelete(heap_t *h)
 {
-	Block *walker, *next;
+	node_t *n, *n2;
+	block_t *b;
 
-	if (bh == NULL)
-	{
-		return (1);
-	}
+	if (h == NULL)
+		return FALSE;
 
-	for (walker = bh->base; walker != NULL; walker = next)
+	LIST_FOREACH_SAFE(n, n2, h->blocks.head)
 	{
-		next = walker->next;
-		free_block(walker->elems, walker->alloc_size);
-		if (walker != NULL)
-			free(walker);
+		b = n->data;
+		free_block(b->element, b->alloc_size);
+		node_del(n, &h->blocks);
+		free(b);
 	}
-	node_del(&bh->hlist, &heap_lists);
-	free(bh);
+
+	node_del(&h->hlist, &heap_lists);
+	free(h);
+
 	return (0);
 }
 
-void BlockHeapUsage(BlockHeap *bh, size_t * bused, size_t * bfree, size_t * bmemusage)
+/*
+ * bstat()
+ *
+ * Inputs:
+ *       heap_t object, pointers to bused, bfree, bmemusage counters
+ *
+ * Outputs:
+ *       none
+ *
+ * Side Effects:
+ *       overwrites values stored in pointers, be warned.
+ */
+void bstat(heap_t *h, size_t *bused, size_t *bavail, size_t *bmemusage)
 {
 	size_t used;
 	size_t freem;
 	size_t memusage;
-	if (bh == NULL)
-	{
+
+	if (h == NULL)
 		return;
-	}
 
-	freem = bh->freeElems;
-	used = (bh->blocksAllocated * bh->elemsPerBlock) - bh->freeElems;
-	memusage = used * (bh->elemSize + sizeof(MemBlock));
+	freem = h->freecount;
+	used = (h->allocated * h->elements) - h->freecount;
+	memusage = used * (h->chunk_size + sizeof(chunk_t));
 
 	if (bused != NULL)
 		*bused = used;
-	if (bfree != NULL)
-		*bfree = freem;
+	if (bavail != NULL)
+		*bavail = freem;
 	if (bmemusage != NULL)
 		*bmemusage = memusage;
 }
