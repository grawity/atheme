# Copyright (c) 2006 William Pitcock, et al.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the authors nor the names of its contributors
#    may be used to endorse or promote products derived from this software
#    without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHORS AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.

use strict;

open(IN, "names/default");

my %begin_sym = ( );
my %medial_sym = ( );
my %end_sym = ( );
my $which = 0;
my $id = 0;

while (my $line = <IN>) {
	chomp $line;

	if ($line =~ /^%/) {
		$which++;
		next;
	}

	$begin_sym{$line} = $line if ($which == 0);
	$medial_sym{$line} = $line if ($which == 1);
	$end_sym{$line} = $line if ($which == 2);
};

print "/* Autogenerated by gen_namegen_tab.pl. Do not modify! */\n";
print "#ifndef _NAMEGEN_H\n";
print "#define _NAMEGEN_H\n\n";

print "const char *begin_sym[] = {\n";

foreach my $sym (keys %begin_sym) {
	print "\t\"$sym\",\n";
	$id++;
};

print "};\n\n";

print "#define BEGIN_SYM_SZ $id\n\n";
$id = 0;

print "const char *medial_sym[] = {\n";

foreach my $sym (keys %medial_sym) {
	print "\t\"$sym\",\n";
	$id++;
};

print "};\n\n";

print "#define MEDIAL_SYM_SZ $id\n\n";
$id = 0;

print "const char *end_sym[] = {\n";

foreach my $sym (keys %end_sym) {
	print "\t\"$sym\",\n";
	$id++;
};

print "};\n\n";

print "#define END_SYM_SZ $id\n\n";

print "#endif\n";
